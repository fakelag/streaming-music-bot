// Code generated by MockGen. DO NOT EDIT.
// Source: discordplayer/interfaces/discorduserinterface.go
//
// Generated by this command:
//
//	mockgen -source=discordplayer/interfaces/discorduserinterface.go -destination discordplayer/mocks/discorduserinterface_mock.go
//

// Package mock_discordinterface is a generated GoMock package.
package mock_discordinterface

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDiscordUser is a mock of DiscordUser interface.
type MockDiscordUser struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordUserMockRecorder
}

// MockDiscordUserMockRecorder is the mock recorder for MockDiscordUser.
type MockDiscordUserMockRecorder struct {
	mock *MockDiscordUser
}

// NewMockDiscordUser creates a new mock instance.
func NewMockDiscordUser(ctrl *gomock.Controller) *MockDiscordUser {
	mock := &MockDiscordUser{ctrl: ctrl}
	mock.recorder = &MockDiscordUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordUser) EXPECT() *MockDiscordUserMockRecorder {
	return m.recorder
}

// Bot mocks base method.
func (m *MockDiscordUser) Bot() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bot")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bot indicates an expected call of Bot.
func (mr *MockDiscordUserMockRecorder) Bot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bot", reflect.TypeOf((*MockDiscordUser)(nil).Bot))
}
