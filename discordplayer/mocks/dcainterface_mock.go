// Code generated by MockGen. DO NOT EDIT.
// Source: discordplayer/interfaces/dcainterface.go
//
// Generated by this command:
//
//	mockgen -source=discordplayer/interfaces/dcainterface.go -destination discordplayer/mocks/dcainterface_mock.go
//

// Package mock_discordinterface is a generated GoMock package.
package mock_discordinterface

import (
	discordinterface "musicbot/discordplayer/interfaces"
	reflect "reflect"

	dca "github.com/fakelag/dca"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscordAudio is a mock of DiscordAudio interface.
type MockDiscordAudio struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordAudioMockRecorder
}

// MockDiscordAudioMockRecorder is the mock recorder for MockDiscordAudio.
type MockDiscordAudioMockRecorder struct {
	mock *MockDiscordAudio
}

// NewMockDiscordAudio creates a new mock instance.
func NewMockDiscordAudio(ctrl *gomock.Controller) *MockDiscordAudio {
	mock := &MockDiscordAudio{ctrl: ctrl}
	mock.recorder = &MockDiscordAudioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordAudio) EXPECT() *MockDiscordAudioMockRecorder {
	return m.recorder
}

// EncodeFile mocks base method.
func (m *MockDiscordAudio) EncodeFile(path string, options *dca.EncodeOptions) (*dca.EncodeSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeFile", path, options)
	ret0, _ := ret[0].(*dca.EncodeSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeFile indicates an expected call of EncodeFile.
func (mr *MockDiscordAudioMockRecorder) EncodeFile(path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeFile", reflect.TypeOf((*MockDiscordAudio)(nil).EncodeFile), path, options)
}

// NewStream mocks base method.
func (m *MockDiscordAudio) NewStream(source dca.OpusReader, vc discordinterface.DiscordVoiceConnection, done chan error) *dca.StreamingSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream", source, vc, done)
	ret0, _ := ret[0].(*dca.StreamingSession)
	return ret0
}

// NewStream indicates an expected call of NewStream.
func (mr *MockDiscordAudioMockRecorder) NewStream(source, vc, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockDiscordAudio)(nil).NewStream), source, vc, done)
}
