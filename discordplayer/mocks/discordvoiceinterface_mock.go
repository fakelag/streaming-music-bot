// Code generated by MockGen. DO NOT EDIT.
// Source: discordplayer/interfaces/discordvoiceinterface.go
//
// Generated by this command:
//
//	mockgen -source=discordplayer/interfaces/discordvoiceinterface.go -destination discordplayer/mocks/discordvoiceinterface_mock.go \
//

// Package mock_discordinterface is a generated GoMock package.
package mock_discordinterface

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscordVoiceConnection is a mock of DiscordVoiceConnection interface.
type MockDiscordVoiceConnection struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordVoiceConnectionMockRecorder
}

// MockDiscordVoiceConnectionMockRecorder is the mock recorder for MockDiscordVoiceConnection.
type MockDiscordVoiceConnectionMockRecorder struct {
	mock *MockDiscordVoiceConnection
}

// NewMockDiscordVoiceConnection creates a new mock instance.
func NewMockDiscordVoiceConnection(ctrl *gomock.Controller) *MockDiscordVoiceConnection {
	mock := &MockDiscordVoiceConnection{ctrl: ctrl}
	mock.recorder = &MockDiscordVoiceConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordVoiceConnection) EXPECT() *MockDiscordVoiceConnectionMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockDiscordVoiceConnection) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockDiscordVoiceConnectionMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockDiscordVoiceConnection)(nil).Disconnect))
}

// GetRaw mocks base method.
func (m *MockDiscordVoiceConnection) GetRaw() *discordgo.VoiceConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw")
	ret0, _ := ret[0].(*discordgo.VoiceConnection)
	return ret0
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockDiscordVoiceConnectionMockRecorder) GetRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockDiscordVoiceConnection)(nil).GetRaw))
}

// IsReady mocks base method.
func (m *MockDiscordVoiceConnection) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockDiscordVoiceConnectionMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockDiscordVoiceConnection)(nil).IsReady))
}

// Speaking mocks base method.
func (m *MockDiscordVoiceConnection) Speaking(b bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Speaking", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Speaking indicates an expected call of Speaking.
func (mr *MockDiscordVoiceConnectionMockRecorder) Speaking(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Speaking", reflect.TypeOf((*MockDiscordVoiceConnection)(nil).Speaking), b)
}
