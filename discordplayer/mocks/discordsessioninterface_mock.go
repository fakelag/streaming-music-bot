// Code generated by MockGen. DO NOT EDIT.
// Source: discordplayer/interfaces/discordsessioninterface.go
//
// Generated by this command:
//
//	mockgen -source=discordplayer/interfaces/discordsessioninterface.go -destination discordplayer/mocks/discordsessioninterface_mock.go \
//

// Package mock_discordinterface is a generated GoMock package.
package mock_discordinterface

import (
	reflect "reflect"

	discordinterface "github.com/fakelag/streaming-music-bot/discordplayer/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscordSession is a mock of DiscordSession interface.
type MockDiscordSession struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordSessionMockRecorder
}

// MockDiscordSessionMockRecorder is the mock recorder for MockDiscordSession.
type MockDiscordSessionMockRecorder struct {
	mock *MockDiscordSession
}

// NewMockDiscordSession creates a new mock instance.
func NewMockDiscordSession(ctrl *gomock.Controller) *MockDiscordSession {
	mock := &MockDiscordSession{ctrl: ctrl}
	mock.recorder = &MockDiscordSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordSession) EXPECT() *MockDiscordSessionMockRecorder {
	return m.recorder
}

// ChannelVoiceJoin mocks base method.
func (m *MockDiscordSession) ChannelVoiceJoin(gID, cID string, mute, deaf bool) (discordinterface.DiscordVoiceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelVoiceJoin", gID, cID, mute, deaf)
	ret0, _ := ret[0].(discordinterface.DiscordVoiceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelVoiceJoin indicates an expected call of ChannelVoiceJoin.
func (mr *MockDiscordSessionMockRecorder) ChannelVoiceJoin(gID, cID, mute, deaf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelVoiceJoin", reflect.TypeOf((*MockDiscordSession)(nil).ChannelVoiceJoin), gID, cID, mute, deaf)
}
