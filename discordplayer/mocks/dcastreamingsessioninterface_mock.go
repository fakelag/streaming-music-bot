// Code generated by MockGen. DO NOT EDIT.
// Source: discordplayer/interfaces/dcastreamingsessioninterface.go
//
// Generated by this command:
//
//	mockgen -source=discordplayer/interfaces/dcastreamingsessioninterface.go -destination discordplayer/mocks/dcastreamingsessioninterface_mock.go
//

// Package mock_discordinterface is a generated GoMock package.
package mock_discordinterface

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockDcaStreamingSession is a mock of DcaStreamingSession interface.
type MockDcaStreamingSession struct {
	ctrl     *gomock.Controller
	recorder *MockDcaStreamingSessionMockRecorder
}

// MockDcaStreamingSessionMockRecorder is the mock recorder for MockDcaStreamingSession.
type MockDcaStreamingSessionMockRecorder struct {
	mock *MockDcaStreamingSession
}

// NewMockDcaStreamingSession creates a new mock instance.
func NewMockDcaStreamingSession(ctrl *gomock.Controller) *MockDcaStreamingSession {
	mock := &MockDcaStreamingSession{ctrl: ctrl}
	mock.recorder = &MockDcaStreamingSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDcaStreamingSession) EXPECT() *MockDcaStreamingSessionMockRecorder {
	return m.recorder
}

// Finished mocks base method.
func (m *MockDcaStreamingSession) Finished() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finished indicates an expected call of Finished.
func (mr *MockDcaStreamingSessionMockRecorder) Finished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockDcaStreamingSession)(nil).Finished))
}

// Paused mocks base method.
func (m *MockDcaStreamingSession) Paused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Paused indicates an expected call of Paused.
func (mr *MockDcaStreamingSessionMockRecorder) Paused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paused", reflect.TypeOf((*MockDcaStreamingSession)(nil).Paused))
}

// PlaybackPosition mocks base method.
func (m *MockDcaStreamingSession) PlaybackPosition() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaybackPosition")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// PlaybackPosition indicates an expected call of PlaybackPosition.
func (mr *MockDcaStreamingSessionMockRecorder) PlaybackPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaybackPosition", reflect.TypeOf((*MockDcaStreamingSession)(nil).PlaybackPosition))
}

// SetPaused mocks base method.
func (m *MockDcaStreamingSession) SetPaused(paused bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPaused", paused)
}

// SetPaused indicates an expected call of SetPaused.
func (mr *MockDcaStreamingSessionMockRecorder) SetPaused(paused any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaused", reflect.TypeOf((*MockDcaStreamingSession)(nil).SetPaused), paused)
}
